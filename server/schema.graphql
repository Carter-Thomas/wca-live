type Query {
  me: User
  competitions: Competitions!
  competition(id: ID!): Competition
  round(competitionId: ID!, roundId: ID!): Round
  competitor(competitionId: ID!, competitorId: ID!): Person
}

type Mutation {
  importCompetition(id: ID!): Competition
  setResult(competitionId: ID!, roundId: ID!, result: ResultInput!): Round
  openRound(competitionId: ID!, roundId: ID!): Round
  clearRound(competitionId: ID!, roundId: ID!): Round
}

type Competitions {
  upcoming: [Competition!]!
  inProgress: [Competition!]!
  past: [Competition!]!
}

type User {
  id: ID!
  # WCA attributes
  wcaUserId: Int!
  wcaId: String
  name: String!
  avatar: Avatar!
  # Additional attributes
  importableCompetitions: [Competition!]!
  manageableCompetitions: [Competition!]!
}

type Avatar {
  url: String
  thumbUrl: String
}

type Competition {
  id: ID!
  name: String!
  startDate: String!
  endDate: String!
  events: [Event!]!
  competitors: [Person!]!
}

type Event {
  id: ID!
  name: String!
  rounds: [Round!]!
}

type Round {
  id: ID!
  name: String!
  event: Event!
  format: Format!
  timeLimit: TimeLimit
  cutoff: Cutoff
  # advancementCondition: AdvancementCondition
  results: [Result!]!
  open: Boolean!
}

type Format {
  id: ID!
  name: String!
  shortName: String!
  solveCount: Int!
  sortBy: String!
}

type TimeLimit {
  centiseconds: Int!
  cumulativeRoundIds: [String!]!
}

type Cutoff {
  numberOfAttempts: Int!
  attemptResult: Int!
}

type Result {
  person: Person!
  ranking: Int
  attempts: [Int]!
  advancable: Boolean!
  round: Round!
  recordTags: RecordTags!
}

type RecordTags {
  single: String
  average: String
}

type Person {
  id: ID!
  name: String!
  wcaId: String
  country: Country!
  avatar: Avatar
  roles: [String!]!
  # registration: Registration!
  # personalBests: [PersonalBest!]!
  results: [Result!]!
}

type Country {
  iso2: String!
  name: String!
}

# type PersonalBest {
#   eventId: String!
#   best: Int!
#   worldRanking: Int!
#   continentalRanking: Int!
#   nationalRanking: Int!
#   type: String!
# }

# Inputs

input ResultInput {
  personId: ID!
  attempts: [Int!]!
}
