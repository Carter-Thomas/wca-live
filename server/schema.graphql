type Query {
  me: User
  competitions: Competitions!
  competition(id: ID!): Competition
  round(competitionId: ID!, roundId: ID!): Round
  competitor(competitionId: ID!, competitorId: ID!): Person
}

type Mutation {
  importCompetition(id: ID!): Competition
  synchronize(competitionId: ID!): Competition
  updateAccessSettings(competitionId: ID!, accessSettings: AccessSettingsInput!): Competition
  updateResult(competitionId: ID!, roundId: ID!, result: ResultInput!): Round
  openRound(competitionId: ID!, roundId: ID!): Round
  clearRound(competitionId: ID!, roundId: ID!): Round
  quitCompetitor(competitionId: ID!, roundId: ID!, competitorId: ID!, replace: Boolean!): Round
  addCompetitor(competitionId: ID!, roundId: ID!, competitorId: ID!): Round
}

type Subscription {
  roundUpdate(competitionId: ID!, roundId: ID!): Round
}

type Competitions {
  upcoming: [Competition!]!
  inProgress: [Competition!]!
  past: [Competition!]!
}

type User {
  id: ID!
  # WCA attributes
  wcaUserId: Int!
  wcaId: String
  name: String!
  avatar: Avatar!
  # Additional attributes
  importableCompetitions: [Competition!]!
  manageableCompetitions: [Competition!]!
}

type Avatar {
  url: String
  thumbUrl: String
}

type Competition {
  id: ID!
  name: String!
  events: [Event!]!
  schedule: Schedule!
  competitors: [Person!]!
  countries: [Country!]!
  synchronizedAt: String!
  # Finished final rounds including only podium results.
  podiums: [Round!]!
  scoretakers: [Person!]!
  passwordAuthEnabled: Boolean!
}

type Event {
  id: ID!
  name: String!
  rounds: [Round!]!
}

type Round {
  id: ID!
  name: String!
  label: String
  event: Event!
  format: Format!
  timeLimit: TimeLimit
  cutoff: Cutoff
  results: [Result!]!
  open: Boolean!
  finished: Boolean!
  active: Boolean!
  nextQualifying: [Person!] # People who would qualify to this round if one person quit.
  missingQualifying: MissingQualifying
}

type Format {
  id: ID!
  name: String!
  shortName: String!
  solveCount: Int!
  sortBy: String!
}

type TimeLimit {
  centiseconds: Int!
  cumulativeRoundIds: [String!]!
}

type Cutoff {
  numberOfAttempts: Int!
  attemptResult: Int!
}

type Result {
  person: Person!
  ranking: Int
  attempts: [Int]!
  best: Int!
  average: Int!
  advancable: Boolean!
  round: Round!
  recordTags: RecordTags!
  updatedAt: String!
}

type RecordTags {
  single: String
  average: String
}

type MissingQualifying {
  # People who qualify to this round, but are not in it.
  qualifying: [Person!]!
  # People who would be removed if one qualifying person was added to the round.
  excess: [Person!]!
}

type Schedule {
  startDate: String!
  endDate: String!
  venues: [Venue!]!
}

type Venue {
  name: String!
  rooms: [Room!]!
  latitude: Float!
  longitude: Float!
}

type Room {
  id: ID!
  name: String!
  color: String!
  activities: [Activity!]!
}

type Activity {
  id: ID!
  name: String!
  activityCode: String!
  startTime: String!
  endTime: String!
  childActivities: [Activity!]!
}

type Person {
  id: ID!
  name: String!
  wcaId: String
  country: Country!
  avatar: Avatar
  roles: [String!]!
  results: [Result!]!
}

type Country {
  iso2: String!
  name: String!
}

# Inputs

input ResultInput {
  personId: ID!
  attempts: [Int!]!
}

input AccessSettingsInput {
  scoretakerIds: [ID!]!
  passwordAuthEnabled: Boolean!
  password: String!
}
